import type { ActionStatus } from '@polkadot/react-components/Status/types';
import type { DisplayedJudgement } from '@polkadot/react-components/types';
import type { AccountId, AccountIndex, Address } from '@polkadot/types/interfaces';
import type { CreateResult } from '@polkadot/ui-keyring/types';
import type { AccountBalance, SortedAccount } from './types';
import React from 'react';
export declare function createMenuGroup(key: string, items: (React.ReactNode | false | undefined | null)[], header?: string): React.ReactNode | null;
export declare type AccountIdIsh = AccountId | AccountIndex | Address | string | Uint8Array | null;
export declare function downloadAccount({ json, pair }: CreateResult): void;
export declare function tryCreateAccount(commitAccount: () => CreateResult, success: string): ActionStatus;
export declare const sortCategory: readonly ["parent", "name", "date", "balances", "type"];
export declare type SortCategory = typeof sortCategory[number];
export declare function sortAccounts(accountsList: SortedAccount[], accountsMap: Record<string, SortedAccount>, balances: Record<string, AccountBalance>, by: SortCategory, fromMax: boolean): SortedAccount[];
export declare const getJudgementColor: (name: DisplayedJudgement) => 'green' | 'red';
